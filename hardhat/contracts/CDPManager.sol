pragma solidity >=0.8.0 <0.9.0;

import "hardhat/console.sol";
import "./NOI.sol";

error CDPManager__NotAuthorized();
error CDPManager__HasDebt();

contract CDPManager {
    struct CDP {
        // Total amount of collateral locked in a CDP
        uint256 lockedCollateral; // [wad]
        // Total amount of debt generated by a CDP
        uint256 generatedDebt; // [wad]
        // Address of owner
        address owner;
    }

    uint256 private totalSupply;
    uint256 cdpi;
    mapping(uint256 => CDP) private cdpList; // CDPId => CDP

    NOI private immutable NOI_COIN;

    modifier HasAccess(address _user) {
        if(msg.sender != _user) revert CDPManager__NotAuthorized();
        _;
    }

    constructor(address _noiCoin) {
        totalSupply = 0;
        cdpi = 0;
        NOI_COIN = NOI(_noiCoin);
    }

    // Open a new cdp for a given _user address.
    function openCDP(address _user) public payable returns (uint256) {
        cdpi = cdpi + 1;
        cdpList[cdpi] = CDP(msg.value, 0, _user);
        totalSupply = totalSupply + msg.value;
        return cdpi;
    }

    //Adds collateral to an existing CDP
    function transferCollateralToCDP(uint _cdpIndex) public payable {
        cdpList[_cdpIndex].lockedCollateral =
            cdpList[_cdpIndex].lockedCollateral +
            msg.value;
        totalSupply = totalSupply + msg.value;
    }

    // Close CDP if you have 0 debt
    function closeCDP(uint256 _cdpIndex) public {
        if (cdpList[_cdpIndex].generatedDebt != 0) {
            revert CDPManager__HasDebt();
        }
        (bool sent, ) = payable(cdpList[_cdpIndex].owner).call{
            value: cdpList[_cdpIndex].lockedCollateral
        }("");
        if (sent == false) revert();
        totalSupply = totalSupply - cdpList[_cdpIndex].lockedCollateral;
        delete cdpList[_cdpIndex];
    }

    // View total supply of ether in contract
    function getTotalSupply() public view returns (uint256) {
        console.log(totalSupply);
        return totalSupply;
    }

    // View the state of one CDP
    function getOneCDP(uint256 _cdpIndex)
        public
        view
        returns (CDP memory searchedCDP)
    {
        console.log(
            "CDP Owner: %s LockedCollateral: %d GeneratedDebt: %d",
            cdpList[_cdpIndex].owner,
            cdpList[_cdpIndex].lockedCollateral,
            cdpList[_cdpIndex].generatedDebt
        );
        searchedCDP = cdpList[_cdpIndex];
    }

    function mintFromCDP(address _user, uint256 _cdpIndex, uint256 _amount) public HasAccess(_user) {
        NOI_COIN.mint(_user, _amount);
    }

    function repayToCDP(address _user, uint256 _cdpIndex, uint256 _amount) public HasAccess(_user){
        NOI_COIN.burn(_user, _amount);
    }
}
